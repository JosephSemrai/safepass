{"ast":null,"code":"import { configureStore, getDefaultMiddleware } from '@reduxjs/toolkit';\nimport rootReducer from \"./rootReducer\";\nimport { persistStore, persistReducer, FLUSH, REHYDRATE, PAUSE, PERSIST, PURGE, REGISTER } from 'redux-persist';\nimport AsyncStorage from \"react-native-web/dist/exports/AsyncStorage\";\nimport { useDispatch } from 'react-redux';\nvar persistConfig = {\n  key: 'root',\n  storage: AsyncStorage\n};\nvar persistedReducer = persistReducer(persistConfig, rootReducer);\nvar store = configureStore({\n  reducer: persistedReducer,\n  middleware: getDefaultMiddleware({\n    serializableCheck: {\n      ignoredActions: [FLUSH, REHYDRATE, PAUSE, PERSIST, PURGE, REGISTER]\n    }\n  })\n});\nexport var useAppDispatch = function useAppDispatch() {\n  return useDispatch();\n};\nexport var persistor = persistStore(store);\nexport default store;","map":{"version":3,"sources":["C:/Users/josep/Documents/GitHub/safepass/src/app/store.ts"],"names":["configureStore","getDefaultMiddleware","rootReducer","persistStore","persistReducer","FLUSH","REHYDRATE","PAUSE","PERSIST","PURGE","REGISTER","useDispatch","persistConfig","key","storage","AsyncStorage","persistedReducer","store","reducer","middleware","serializableCheck","ignoredActions","useAppDispatch","persistor"],"mappings":"AAAA,SAASA,cAAT,EAAkCC,oBAAlC,QAA8D,kBAA9D;AAEA,OAAOC,WAAP;AACA,SACEC,YADF,EAEEC,cAFF,EAGEC,KAHF,EAIEC,SAJF,EAKEC,KALF,EAMEC,OANF,EAOEC,KAPF,EAQEC,QARF,QASO,eATP;;AAYA,SAASC,WAAT,QAA4B,aAA5B;AAEA,IAAMC,aAAa,GAAG;AACpBC,EAAAA,GAAG,EAAE,MADe;AAEpBC,EAAAA,OAAO,EAAEC;AAFW,CAAtB;AAMA,IAAMC,gBAAgB,GAAGZ,cAAc,CAACQ,aAAD,EAAgBV,WAAhB,CAAvC;AAEA,IAAMe,KAAK,GAAGjB,cAAc,CAAC;AAC3BkB,EAAAA,OAAO,EAAEF,gBADkB;AAE3BG,EAAAA,UAAU,EAAElB,oBAAoB,CAAC;AAC/BmB,IAAAA,iBAAiB,EAAE;AACjBC,MAAAA,cAAc,EAAE,CAAChB,KAAD,EAAQC,SAAR,EAAmBC,KAAnB,EAA0BC,OAA1B,EAAmCC,KAAnC,EAA0CC,QAA1C;AADC;AADY,GAAD;AAFL,CAAD,CAA5B;AAiBA,OAAO,IAAMY,cAAc,GAAG,SAAjBA,cAAiB;AAAA,SAAMX,WAAW,EAAjB;AAAA,CAAvB;AAGP,OAAO,IAAMY,SAAS,GAAGpB,YAAY,CAACc,KAAD,CAA9B;AACP,eAAeA,KAAf","sourcesContent":["import { configureStore, Actions, getDefaultMiddleware } from '@reduxjs/toolkit';\r\nimport { ThunkAction } from 'redux-thunk';\r\nimport rootReducer, { RootState } from './rootReducer';\r\nimport {\r\n  persistStore,\r\n  persistReducer,\r\n  FLUSH,\r\n  REHYDRATE,\r\n  PAUSE,\r\n  PERSIST,\r\n  PURGE,\r\n  REGISTER,\r\n} from 'redux-persist';\r\nimport storage from 'redux-persist/lib/storage';\r\nimport { AsyncStorage } from 'react-native';\r\nimport { useDispatch } from 'react-redux';\r\n\r\nconst persistConfig = {\r\n  key: 'root',\r\n  storage: AsyncStorage,\r\n};\r\n\r\n// Middleware: Redux Persist Persisted Reducer\r\nconst persistedReducer = persistReducer(persistConfig, rootReducer);\r\n\r\nconst store = configureStore({\r\n  reducer: persistedReducer,\r\n  middleware: getDefaultMiddleware({\r\n    serializableCheck: {\r\n      ignoredActions: [FLUSH, REHYDRATE, PAUSE, PERSIST, PURGE, REGISTER],\r\n    },\r\n  }),\r\n});\r\n\r\n// if (process.env.NODE_ENV === 'development' && module.hot) {\r\n//   module.hot.accept('./rootReducer', () => {\r\n//     const newRootReducer = require('./rootReducer').default;\r\n//     store.replaceReducer(newRootReducer);\r\n//   });\r\n// }\r\n\r\nexport type AppDispatch = typeof store.dispatch;\r\nexport const useAppDispatch = () => useDispatch<AppDispatch>(); // Export a hook that can be reused to resolve types\r\n// export type AppThunk = ThunkAction<void, RootState, unknown, Actions<string>>;\r\n\r\nexport const persistor = persistStore(store);\r\nexport default store;\r\n"]},"metadata":{},"sourceType":"module"}