{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nvar _jsxFileName = \"C:\\\\Users\\\\josep\\\\Documents\\\\GitHub\\\\safepass\\\\src\\\\features\\\\login\\\\WebViewStep.tsx\";\nimport View from \"react-native-web/dist/exports/View\";\nimport SafeAreaView from \"react-native-web/dist/exports/SafeAreaView\";\nimport KeyboardAvoidingView from \"react-native-web/dist/exports/KeyboardAvoidingView\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport React from 'react';\nimport { WebView } from 'react-native-webview';\nimport colors from \"../../theme/colors\";\nimport { Ionicons } from '@expo/vector-icons';\nimport Header from \"../../components/Header\";\nvar styles = StyleSheet.create({\n  container: {\n    width: '80%',\n    height: '100%',\n    alignItems: 'stretch',\n    justifyContent: 'flex-start'\n  }\n});\nvar captchaUrl = 'https://nocap-captcha.now.sh/';\n\nvar WebViewStep = function WebViewStep(_ref) {\n  var route = _ref.route,\n      navigation = _ref.navigation;\n  var phoneNumber = route.params.phoneNumber;\n\n  var onGetMessage = function onGetMessage(event) {\n    var message;\n    return _regeneratorRuntime.async(function onGetMessage$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            message = event.nativeEvent.data;\n            console.log(message);\n            _context.t0 = message;\n            _context.next = _context.t0 === 'DOMLoaded' ? 5 : _context.t0 === 'ErrorSmsCode' ? 6 : _context.t0 === '' ? 8 : 9;\n            break;\n\n          case 5:\n            return _context.abrupt(\"return\");\n\n          case 6:\n            alert('There was an error sending your SMS code. Please try again.');\n            return _context.abrupt(\"return\");\n\n          case 8:\n            return _context.abrupt(\"return\");\n\n          case 9:\n            navigation.goBack();\n            navigation.navigate('CodeInput', {\n              verificationId: message\n            });\n\n          case 11:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  };\n\n  return React.createElement(SafeAreaView, {\n    style: {\n      backgroundColor: colors.contrastText,\n      alignItems: 'center'\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 5\n    }\n  }, React.createElement(Ionicons, {\n    name: \"ios-close-circle\",\n    size: 36,\n    style: {\n      position: 'absolute',\n      right: 20,\n      top: 15\n    },\n    color: colors.textColor,\n    onPress: function onPress() {\n      return navigation.goBack();\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 7\n    }\n  }), React.createElement(KeyboardAvoidingView, {\n    style: styles.container,\n    behavior: Platform.select({\n      ios: 'padding',\n      android: null\n    }),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 7\n    }\n  }, React.createElement(Header, {\n    style: {\n      flex: 1\n    },\n    emoji: \"robot_face\",\n    title: \"making sure ur not a robot\",\n    subtitle: \"please wait, u may have to solve a puzzle below so we can prove ur a human\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 9\n    }\n  }), React.createElement(View, {\n    style: {\n      flex: 3,\n      backgroundColor: 'transparent',\n      marginBottom: 10\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 9\n    }\n  }, React.createElement(WebView, {\n    style: {\n      backgroundColor: 'transparent',\n      width: '100%',\n      height: '100%'\n    },\n    injectedJavaScript: \"getToken('\" + phoneNumber + \"')\",\n    source: {\n      uri: captchaUrl\n    },\n    onMessage: onGetMessage,\n    scrollEnabled: false,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 11\n    }\n  }))));\n};\n\nexport default WebViewStep;","map":{"version":3,"sources":["C:/Users/josep/Documents/GitHub/safepass/src/features/login/WebViewStep.tsx"],"names":["React","WebView","colors","Ionicons","Header","styles","StyleSheet","create","container","width","height","alignItems","justifyContent","captchaUrl","WebViewStep","route","navigation","phoneNumber","params","onGetMessage","event","message","nativeEvent","data","console","log","alert","goBack","navigate","verificationId","backgroundColor","contrastText","position","right","top","textColor","Platform","select","ios","android","flex","marginBottom","uri"],"mappings":"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","sourcesContent":["import {\r\n  Text,\r\n  View,\r\n  Button,\r\n  SafeAreaView,\r\n  KeyboardAvoidingView,\r\n  StyleSheet,\r\n  Platform,\r\n} from 'react-native';\r\n\r\nimport React, { useState } from 'react';\r\nimport { WebView } from 'react-native-webview';\r\nimport {\r\n  WebViewScreenNavigationProp,\r\n  WebViewScreenRouteProp,\r\n} from '../../navigation/AuthNavigation';\r\nimport colors from '../../theme/colors';\r\nimport { Ionicons } from '@expo/vector-icons';\r\nimport Header from '../../components/Header';\r\n\r\ninterface IWebViewStepProps {\r\n  navigation: WebViewScreenNavigationProp;\r\n  route: WebViewScreenRouteProp;\r\n}\r\n\r\nconst styles = StyleSheet.create({\r\n  container: {\r\n    width: '80%',\r\n    height: '100%',\r\n    alignItems: 'stretch',\r\n    justifyContent: 'flex-start',\r\n  },\r\n});\r\n\r\nconst captchaUrl: string = 'https://nocap-captcha.now.sh/';\r\n\r\nconst WebViewStep: React.FC<IWebViewStepProps> = ({ route, navigation }: IWebViewStepProps) => {\r\n  const { phoneNumber } = route.params;\r\n\r\n  const onGetMessage = async (event: { nativeEvent: { data: any } }) => {\r\n    const message = event.nativeEvent.data;\r\n    console.log(message);\r\n    switch (message) {\r\n      case 'DOMLoaded':\r\n        return;\r\n      case 'ErrorSmsCode':\r\n        // SMS Not sent or Captcha verification failed. You can do whatever you want here\r\n        alert('There was an error sending your SMS code. Please try again.');\r\n        // setStep('initial');\r\n        return;\r\n      case '':\r\n        return;\r\n      default: {\r\n        navigation.goBack();\r\n        navigation.navigate('CodeInput', { verificationId: message });\r\n      }\r\n    }\r\n  };\r\n  return (\r\n    <SafeAreaView style={{ backgroundColor: colors.contrastText, alignItems: 'center' }}>\r\n      <Ionicons\r\n        name=\"ios-close-circle\"\r\n        size={36}\r\n        style={{\r\n          position: 'absolute',\r\n          right: 20,\r\n          top: 15,\r\n        }}\r\n        color={colors.textColor}\r\n        onPress={() => navigation.goBack()}\r\n      />\r\n      <KeyboardAvoidingView\r\n        style={styles.container}\r\n        behavior={Platform.select({ ios: 'padding', android: null })}>\r\n        <Header\r\n          style={{ flex: 1 }}\r\n          emoji=\"robot_face\"\r\n          title=\"making sure ur not a robot\"\r\n          subtitle=\"please wait, u may have to solve a puzzle below so we can prove ur a human\"\r\n        />\r\n        <View style={{ flex: 3, backgroundColor: 'transparent', marginBottom: 10 }}>\r\n          <WebView\r\n            style={{ backgroundColor: 'transparent', width: '100%', height: '100%' }}\r\n            injectedJavaScript={`getToken('${phoneNumber}')`}\r\n            source={{ uri: captchaUrl }}\r\n            onMessage={onGetMessage}\r\n            scrollEnabled={false}\r\n          />\r\n        </View>\r\n      </KeyboardAvoidingView>\r\n    </SafeAreaView>\r\n  );\r\n};\r\n\r\nexport default WebViewStep;\r\n"]},"metadata":{},"sourceType":"module"}