{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/extends\";\nimport _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nvar _jsxFileName = \"C:\\\\Users\\\\josep\\\\Documents\\\\GitHub\\\\safepass\\\\src\\\\components\\\\FancyInput.tsx\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport React, { useState, useEffect } from 'react';\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Animated from \"react-native-web/dist/exports/Animated\";\nimport { TextInput } from 'react-native-gesture-handler';\nimport colors from \"../theme/colors\";\nimport typography from \"../theme/typography\";\n\nvar FancyInput = function FancyInput(props) {\n  var _useState = useState(false),\n      _useState2 = _slicedToArray(_useState, 2),\n      isFocused = _useState2[0],\n      setIsFocused = _useState2[1];\n\n  var styles = StyleSheet.create({\n    input: _objectSpread({\n      width: '100%',\n      height: 40,\n      borderBottomColor: colors.primaryColor,\n      borderBottomWidth: 2\n    }, typography.inputText),\n    labelStyle: {}\n  });\n  var test = new Animated.Value(isFocused ? 0 : 1);\n  useEffect(function () {\n    isFocused ? Animated.timing(test, {\n      toValue: 1,\n      duration: 600\n    }).start() : Animated.timing(test, {\n      toValue: 0,\n      duration: 600\n    }).start();\n  }, [isFocused]);\n  return React.createElement(React.Fragment, null, React.createElement(Animated.Text, {\n    style: {\n      position: 'relative',\n      opacity: test,\n      top: 10\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 7\n    }\n  }, props.label), React.createElement(TextInput, _extends({}, props, {\n    style: [styles.input, props == null ? void 0 : props.style],\n    onFocus: function onFocus() {\n      return setIsFocused(true);\n    },\n    onBlur: function onBlur() {\n      return setIsFocused(false);\n    },\n    blurOnSubmit: true,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 7\n    }\n  })));\n};\n\nexport default FancyInput;","map":{"version":3,"sources":["C:/Users/josep/Documents/GitHub/safepass/src/components/FancyInput.tsx"],"names":["React","useState","useEffect","TextInput","colors","typography","FancyInput","props","isFocused","setIsFocused","styles","StyleSheet","create","input","width","height","borderBottomColor","primaryColor","borderBottomWidth","inputText","labelStyle","test","Animated","Value","timing","toValue","duration","start","position","opacity","top","label","style"],"mappings":";;;;;;;;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;;;AAEA,SAA2BC,SAA3B,QAA4C,8BAA5C;AACA,OAAOC,MAAP;AACA,OAAOC,UAAP;;AAMA,IAAMC,UAAqC,GAAG,SAAxCA,UAAwC,CAAAC,KAAK,EAAI;AAAA,kBACnBN,QAAQ,CAAC,KAAD,CADW;AAAA;AAAA,MAC9CO,SAD8C;AAAA,MACnCC,YADmC;;AAGrD,MAAMC,MAAM,GAAGC,UAAU,CAACC,MAAX,CAAkB;AAC/BC,IAAAA,KAAK;AACHC,MAAAA,KAAK,EAAE,MADJ;AAEHC,MAAAA,MAAM,EAAE,EAFL;AAGHC,MAAAA,iBAAiB,EAAEZ,MAAM,CAACa,YAHvB;AAIHC,MAAAA,iBAAiB,EAAE;AAJhB,OAMAb,UAAU,CAACc,SANX,CAD0B;AAS/BC,IAAAA,UAAU,EAAE;AATmB,GAAlB,CAAf;AAYA,MAAMC,IAAI,GAAG,IAAIC,QAAQ,CAACC,KAAb,CAAmBf,SAAS,GAAG,CAAH,GAAO,CAAnC,CAAb;AAEAN,EAAAA,SAAS,CAAC,YAAM;AACdM,IAAAA,SAAS,GACLc,QAAQ,CAACE,MAAT,CAAgBH,IAAhB,EAAsB;AACpBI,MAAAA,OAAO,EAAE,CADW;AAEpBC,MAAAA,QAAQ,EAAE;AAFU,KAAtB,EAGGC,KAHH,EADK,GAKLL,QAAQ,CAACE,MAAT,CAAgBH,IAAhB,EAAsB;AACpBI,MAAAA,OAAO,EAAE,CADW;AAEpBC,MAAAA,QAAQ,EAAE;AAFU,KAAtB,EAGGC,KAHH,EALJ;AASD,GAVQ,EAUN,CAACnB,SAAD,CAVM,CAAT;AAYA,SACE,0CACE,oBAAC,QAAD,CAAU,IAAV;AAAe,IAAA,KAAK,EAAE;AAAEoB,MAAAA,QAAQ,EAAE,UAAZ;AAAwBC,MAAAA,OAAO,EAAER,IAAjC;AAAuCS,MAAAA,GAAG,EAAE;AAA5C,KAAtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGvB,KAAK,CAACwB,KADT,CADF,EAKE,oBAAC,SAAD,eAGMxB,KAHN;AAIE,IAAA,KAAK,EAAE,CAACG,MAAM,CAACG,KAAR,EAAeN,KAAf,oBAAeA,KAAK,CAAEyB,KAAtB,CAJT;AAKE,IAAA,OAAO,EAAE;AAAA,aAAMvB,YAAY,CAAC,IAAD,CAAlB;AAAA,KALX;AAME,IAAA,MAAM,EAAE;AAAA,aAAMA,YAAY,CAAC,KAAD,CAAlB;AAAA,KANV;AAOE,IAAA,YAAY,MAPd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KALF,CADF;AAiBD,CA9CD;;AAgDA,eAAeH,UAAf","sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport { Text, StyleSheet, GestureResponderEvent, TextInputProps, Animated } from 'react-native';\r\nimport { TouchableOpacity, TextInput } from 'react-native-gesture-handler';\r\nimport colors from '../theme/colors';\r\nimport typography from '../theme/typography';\r\n\r\ninterface FancyInputProps extends TextInputProps {\r\n  label?: string;\r\n}\r\n\r\nconst FancyInput: React.FC<FancyInputProps> = props => {\r\n  const [isFocused, setIsFocused] = useState(false);\r\n\r\n  const styles = StyleSheet.create({\r\n    input: {\r\n      width: '100%',\r\n      height: 40, // Adjusts how much space there is between the border\r\n      borderBottomColor: colors.primaryColor,\r\n      borderBottomWidth: 2,\r\n      // Add input text styling\r\n      ...typography.inputText,\r\n    },\r\n    labelStyle: {},\r\n  });\r\n\r\n  const test = new Animated.Value(isFocused ? 0 : 1);\r\n\r\n  useEffect(() => {\r\n    isFocused\r\n      ? Animated.timing(test, {\r\n          toValue: 1,\r\n          duration: 600,\r\n        }).start()\r\n      : Animated.timing(test, {\r\n          toValue: 0,\r\n          duration: 600,\r\n        }).start();\r\n  }, [isFocused]);\r\n\r\n  return (\r\n    <>\r\n      <Animated.Text style={{ position: 'relative', opacity: test, top: 10 }}>\r\n        {props.label}\r\n      </Animated.Text>\r\n\r\n      <TextInput\r\n        // placeholderTextColor={typography.inputText.color}\r\n        // textAlignVertical=\"bottom\"\r\n        {...props}\r\n        style={[styles.input, props?.style]}\r\n        onFocus={() => setIsFocused(true)}\r\n        onBlur={() => setIsFocused(false)}\r\n        blurOnSubmit\r\n      />\r\n    </>\r\n  );\r\n};\r\n\r\nexport default FancyInput;\r\n"]},"metadata":{},"sourceType":"module"}